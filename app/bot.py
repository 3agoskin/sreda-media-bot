import logging
import re
import asyncio

import aiogram.utils.markdown as md
from aiogram import Bot, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters import CommandStart
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.deep_linking import get_start_link, decode_payload

import config
from config import TOKEN, WEEK, OFFER_USERNAME
from app.dialogs import msg
from database import database as db, cache
import app.service as s
from middlewares import OfferMiddleware

# —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(OfferMiddleware(OFFER_USERNAME))


class Form(StatesGroup):
    santa = State()
    geo = State()
    eco = State()
    feedback = State()



@dp.message_handler(commands=['data'])
async def data (message: types.Message):
    path_file = await db.get_data()
    await bot.send_document(
        chat_id=message.from_user.id,
        document=types.InputFile(
            path_or_bytesio=path_file,
            filename='survey_new_year_tree.csv'),
        caption='–î–∞–Ω–Ω—ã–µ —Å –æ–ø—Ä–æ—Å–∞ –ø–æ —ë–ª–∫–∞ –≤ csv —Ñ–æ—Ä–º–∞—Ç–µ'
        )
        
@dp.message_handler()
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message, state: FSMContext):
    await bot.send_message(
            chat_id=message.from_user.id,
            text=md.text(
                md.bold("–°–∫–æ—Ä–æ –±—É–¥—É—Ç –Ω–æ–≤—ã–µ –æ–ø—Ä–æ—Å—ã"),
                md.text(),
                md.text("–ö–∞–∫ —Å–¥–µ–ª–∞–µ–º - –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!"),
                md.text(),
                md.text('\_'),
                md.italic('¬´–°—Ä–µ–¥–∞¬ª ‚Äî –º–µ–¥–∏–∞ —Å —É–ª–∏—Ü –•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫–∞'),
                sep='\n'
        ),
        parse_mode=types.ParseMode.MARKDOWN_V2)


# @dp.message_handler(commands=['start'])
# async def start_handler(message: types.Message, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã start. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å"""

#     santa_secret = await s.bot_start(message)
#     print(f"{santa_secret=}")
#     if santa_secret:
#         santa_secret, to_id = santa_secret
#         santa_secret, = santa_secret
#         await Form.santa.set()
#         cache.setex(f"santa_to_{message.from_user.id}", WEEK, to_id)
#         await message.answer(msg.ref_text.format(name=santa_secret))

#     elif await s.after_survey(message):
#         return await bot.send_message(
#             chat_id=message.from_user.id,
#             text=md.text(
#                 md.bold("–°–∫–æ—Ä–æ –±—É–¥—É—Ç –Ω–æ–≤—ã–µ –æ–ø—Ä–æ—Å—ã"),
#                 md.text(),
#                 md.text("–ù–æ –º–æ–∂–Ω–æ –ø–æ–∏–≥—Ä–∞—Ç—å –≤ —Ç–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –¥—Ä—É–∑—å—è–º —á—Ç–æ\-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–µ\. –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –≤ –±–æ—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞\. –ê –º—ã –≤—Å–µ –∑–∞–ø–∏—à–µ–º –∏ –ø–µ—Ä–µ–¥–∞–¥–∏–º, –∞–Ω–æ–Ω–∏–º–Ω–æ –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –æ—Ç –≤–∞—Å\."),
#                 md.text(),
#                 md.text('\_'),
#                 md.italic('¬´–°—Ä–µ–¥–∞¬ª ‚Äî –º–µ–¥–∏–∞ —Å —É–ª–∏—Ü –•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫–∞'),
#                 sep='\n'
#         ),
#         parse_mode=types.ParseMode.MARKDOWN_V2)

#     else:
#         state.finish()
#         await bot.send_message(
#             chat_id=message.from_user.id,
#             text="""–ü–∞—Ä–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤. 
# –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø—Ä–æ—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç:

# 1. –ù–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ–Ω–∏–µ, –∫–∞–∫–∞—è –µ–ª–∫–∞ —ç–∫–æ–ª–æ–≥–∏—á–Ω–µ–µ. –ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–∏—Å–∞—Ç—å, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –Ω–∞–∂–∞–≤ /start

# 2. –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ –ø—Ä–æ –æ–ø—Ä–æ—Å. –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç –º–æ–∂–Ω–æ —Ç–∞–∫ –∂–µ –Ω–∞–∂–∞–≤ /start

# 3. –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å ‚Äì —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É OS –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ: iOS –∏–ª–∏ Android, —á—Ç–æ–±—ã –±–æ—Ç –≤—ã–¥–∞–ª –≤–∞–º –Ω—É–∂–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –∑–∞–ø–∏—Å–∞–ª –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã.

# –ò –≤—Å—ë, –Ω–∞—á–∏–Ω–∞–π—Ç–µ –æ–ø—Ä–æ—Å –∏ –∑–∞–≤–µ—Ä—à–∞–π—Ç–µ –µ–≥–æ –¥–æ –∫–æ–Ω—Ü–∞!""")

#         msg_survey = await message.answer(
#             msg.survey_offer, 
#             parse_mode=types.ParseMode.MARKDOWN_V2,
#             reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('–ü–æ–≥–Ω–∞–ª–∏ –∫ –æ–ø—Ä–æ—Å—É', callback_data='survey_start')))
#         cache.setex(f"survey_msg_to_{message.from_user.id}", WEEK, msg_survey.message_id)
    



@dp.message_handler(content_types=['text'], state=Form.santa)
async def secret_santa(message: types.Message, state: FSMContext):
    cache.setex(f"santa_{message.from_user.id}", WEEK, message.text)
    await bot.send_message(
        chat_id=message.from_user.id,
        text='–ê–Ω–æ–Ω–∏–º–Ω–æ –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é?',
        reply_markup=InlineKeyboardMarkup().row(InlineKeyboardButton("ü¶∏üèª‚Äç‚ôÄÔ∏èü¶∏üèº‚Äç‚ôÇÔ∏è –∞–Ω–æ–Ω–∏–º–Ω–æ", callback_data='santa_secret'))\
            .row(InlineKeyboardButton("ü§µüèª‚Äç‚ôÄÔ∏èü§µüèº –Ω–∞–ø—Ä—è–º—É—é", callback_data='santa_open'))
    )

@dp.callback_query_handler(lambda c: str(c.data).startswith('santa'), state=Form.santa)
async def save_santa_text(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    parametr = callback_query.data.split('_')[-1]
    from_id = callback_query.from_user.id
    from_username = callback_query.from_user.username
    f_name = callback_query.from_user.first_name
    l_name = s.clear_last_name(callback_query.from_user.last_name)
    from_name = f_name + ' ' + l_name
    to_id = cache.get(f"santa_to_{callback_query.from_user.id}")
    print(f"{to_id=}")
    postcard_text = cache.get(f"santa_{callback_query.from_user.id}")
    match parametr:
        case 'secret':
            await db.insert_santa(
                from_tg_user_id=from_id,
                to_tg_user_id=to_id,
                from_tg_user_username=from_username,
                from_tg_user_name=from_name,
                postcard_text=postcard_text,
                show_author=False
            )
            await bot.send_message(
                chat_id=callback_query.from_user.id,
                text="–û—Ç–ø—Ä–∞–≤–∏–º –∞–Ω–æ–Ω–∏–º–Ω–æ, –≤–∞—Å —Ç–æ–∂–µ —É–≤–µ–¥–æ–º–∏–º –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ\n\n–û–ø—Ä–æ—Å –ø–æ —ë–ª–∫–∞–º - /start"
            )
        case 'open':
            await db.insert_santa(
                from_tg_user_id=from_id,
                to_tg_user_id=to_id,
                from_tg_user_username=from_username,
                from_tg_user_name=from_name,
                postcard_text=postcard_text,
                show_author=True
            )
            await bot.send_message(
                chat_id=callback_query.from_user.id,
                text="–û—Ç–ø—Ä–∞–≤–∏–º —Å –≤–∞—à–∏–º –∏–º–µ–Ω–µ–º, –≤–∞—Å —Ç–æ–∂–µ —É–≤–µ–¥–æ–º–∏–º –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ\n\n–û–ø—Ä–æ—Å –ø–æ —ë–ª–∫–∞–º - /start"
            )
    
    








@dp.callback_query_handler(lambda c: c.data == 'survey_start')
async def survey_step1(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ - –ü–æ–≥–Ω–∞–ª–∏ –∫ –æ–ø—Ä–æ—Å—É"""
    
    await bot.edit_message_text(
        text=msg.survey_step1_where_are_you_from,
        chat_id=callback_query.from_user.id,
        message_id=cache.get(f"survey_msg_to_{callback_query.from_user.id}"),
        reply_markup=InlineKeyboardMarkup()\
            .row(InlineKeyboardButton("–•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫", callback_data='survey_step1_hm'))\
            .row(InlineKeyboardButton("–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data='survey_step1_anothercity')))

@dp.callback_query_handler(lambda c: str(c.data).startswith('survey_step1'))
async def survey_step2(callback_query: types.CallbackQuery):
    '''–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ - –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥'''
    
    if callback_query.data.split('_')[-1] == 'anothercity':
        await Form.geo.set()
        msg_dots = await bot.send_message(
            text="–ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é (–∞ –º—ã –ø–æ—Ç–æ–º –ø–æ–π–º–µ–º –æ—Ç–∫—É–¥–∞ –≤—ã!)",\
            chat_id=callback_query.from_user.id,\
            reply_markup=ReplyKeyboardMarkup().add(KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é', request_location=True))
        )
        cache.setex(f"geo_msg_for_{callback_query.from_user.id}", WEEK, msg_dots.message_id)
        await bot.edit_message_text(
            text=msg.survey_step1_anothercity,
            chat_id=callback_query.from_user.id,
            message_id=cache.get(f"survey_msg_to_{callback_query.from_user.id}"),)
        
    else:
        cache.setex(f"result_city_{callback_query.from_user.id}", WEEK, 'hm')
        await s.step2(bot, callback_query)




@dp.message_handler(content_types=['location'], state=Form.geo)
async def get_geo(message: types.Message, state: FSMContext):
    '''–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏'''
    
    cache.setex(f"result_city_{message.from_user.id}", WEEK, f"{message.location.latitude}, {message.location.longitude}")
    await s.clear_keyboard_and_messages(bot, message)
    await state.finish()
    await s.step2(bot, message)



@dp.message_handler(content_types=['text'], state=Form.geo)
async def get_geo(message: types.Message, state: FSMContext):
    '''–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥—Ä—É–≥–æ–≥–æ –≥–æ—Ä–æ–¥–∞'''
    
    cache.setex(f"result_city_{message.from_user.id}", WEEK, message.text)
    await s.clear_keyboard_and_messages(bot, message)
    await state.finish()
    await s.step2(bot, message)


@dp.callback_query_handler(lambda c: str(c.data).startswith('survey_step2'))
async def survey_step3(callback_query: types.CallbackQuery):
    
    tree = callback_query.data.split('_')[-1]
    match tree:
        case 'realtree':
            cache.setex(f"result_tree_{callback_query.from_user.id}", WEEK, tree)
            await bot.edit_message_text(
                text=msg.survey_step3_why_real_tree,
                chat_id=callback_query.from_user.id,
                message_id=cache.get(f'survey_msg_to_{callback_query.from_user.id}'),
                reply_markup=InlineKeyboardMarkup()\
                    .row(InlineKeyboardButton(text='–ó–∞–ø–∞—Ö!', callback_data='survey_step3_smell'))\
                    .row(InlineKeyboardButton(text='–ù–µ –Ω–∞–¥–æ —Ö—Ä–∞–Ω–∏—Ç—å - —É–¥–æ–±–Ω–æ!', callback_data='survey_step3_confort'))\
                    .row(InlineKeyboardButton(text='–ü—Ä–æ—Å—Ç–æ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è', callback_data='survey_step3_like'))\
                    .row(InlineKeyboardButton(text='–ü—Ä–∏–µ–º–ª–µ–º–∞—è —Ü–µ–Ω–∞', callback_data='survey_step3_price'))\
            )
        case 'plastictree':
            cache.setex(f"result_tree_{callback_query.from_user.id}", WEEK, tree)
            await bot.edit_message_text(
                text=msg.survey_step3_why_plastic_tree,
                chat_id=callback_query.from_user.id,
                message_id=cache.get(f'survey_msg_to_{callback_query.from_user.id}'),
                reply_markup=InlineKeyboardMarkup()\
                    .row(InlineKeyboardButton(text='–û–Ω–∞ –Ω–∞–¥–æ–ª–≥–æ', callback_data='survey_step3_long'))\
                    .row(InlineKeyboardButton(text='–û–Ω–∞ –Ω–∞–º–Ω–æ–≥–æ —É–¥–æ–±–Ω–µ–µ', callback_data='survey_step3_comfort'))\
                    .row(InlineKeyboardButton(text='–ü—Ä–æ—Å—Ç–æ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è', callback_data='survey_step3_like'))\
                    .row(InlineKeyboardButton(text='–ü—Ä–∏–µ–º–ª–µ–º–∞—è —Ü–µ–Ω–∞', callback_data='survey_step3_price'))\
            )
        case 'nonetree':
            cache.setex(f"result_tree_{callback_query.from_user.id}", WEEK, tree)
            await bot.edit_message_text(
                text=msg.survey_step3_why_none_tree,
                chat_id=callback_query.from_user.id,
                message_id=cache.get(f'survey_msg_to_{callback_query.from_user.id}'),
                reply_markup=InlineKeyboardMarkup()\
                    .row(InlineKeyboardButton(text='–ù–µ –æ—Ç–º–µ—á–∞—é –ù–æ–≤—ã–π –≥–æ–¥ —Å–æ–≤—Å–µ–º', callback_data='survey_step3_nonnewyear'))\
                    .row(InlineKeyboardButton(text='–û—Ç–º–µ—á–∞—é –ø–æ –∫–∏—Ç–∞–π. –∫–∞–ª–µ–Ω–¥–∞—Ä—é', callback_data='survey_step3_chineseyear'))\
                    .row(InlineKeyboardButton(text='–ù–µ—Ç –∂–µ–ª–∞–Ω–∏—è —Å—Ç–∞–≤–∏—Ç—å —ë–ª–∫—É/–Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏', callback_data='survey_step3_nowish'))\
            )


@dp.callback_query_handler(lambda c: str(c.data).startswith('survey_step3'))
async def survey_step4(callback_query: types.CallbackQuery):
    
    reason = callback_query.data.split('_')[-1]
    match reason:
        case "price":
            cache.setex(f"result_reason_{callback_query.from_user.id}", WEEK, reason)
        case "confort":
            cache.setex(f"result_reason_{callback_query.from_user.id}", WEEK, reason)
        case "like":
            cache.setex(f"result_reason_{callback_query.from_user.id}", WEEK, reason)
        case "long":
            cache.setex(f"result_reason_{callback_query.from_user.id}", WEEK, reason)
        case "smell":
            cache.setex(f"result_reason_{callback_query.from_user.id}", WEEK, reason)
        case "nonnewyear":
            cache.setex(f"result_reason_{callback_query.from_user.id}", WEEK, reason)
        case "chineseyear":
            cache.setex(f"result_reason_{callback_query.from_user.id}", WEEK, reason)
        case "nowish":
            cache.setex(f"result_reason_{callback_query.from_user.id}", WEEK, reason)
    
    tree = cache.get(f"result_tree_{callback_query.from_user.id}")
    match tree:
        case "realtree":
            if cache.get(f"result_city_{callback_query.from_user.id}") == "hm":
                await bot.edit_message_text(
                    text=msg.survey_step4_where_did_you_buy_tree_hm,
                    chat_id=callback_query.from_user.id,
                    message_id=cache.get(f'survey_msg_to_{callback_query.from_user.id}'),
                    reply_markup=InlineKeyboardMarkup()\
                        .row(InlineKeyboardButton(text='–î–∞, –ø—Ä—è–º –∏–∑ —Å–ø–∏—Å–∫–∞', callback_data='survey_step4_list'))\
                        .row(InlineKeyboardButton(text='–ù–µ—Ç, —Å–æ–≤—Å–µ–º –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞', callback_data='survey_step4_notList'))\
                )
            else:
                await s.else_where_did_buy_tree(bot, callback_query)
        case "plastictree":
            await bot.edit_message_text(
                    text=msg.survey_step4_when_did_you_buy_tree,
                    chat_id=callback_query.from_user.id,
                    message_id=cache.get(f'survey_msg_to_{callback_query.from_user.id}'),
                    reply_markup=InlineKeyboardMarkup()\
                        .row(InlineKeyboardButton(text='–í —ç—Ç–æ–º –≥–æ–¥—É', callback_data='survey_step4_thisYear'))\
                        .row(InlineKeyboardButton(text='1-3 –≥–æ–¥–∞ –Ω–∞–∑–∞–¥', callback_data='survey_step4_1or3YearAgo'))\
                        .row(InlineKeyboardButton(text='4-7 –ª–µ—Ç –Ω–∞–∑–∞–¥', callback_data='survey_step4_4or7YearAgo'))\
                        .row(InlineKeyboardButton(text='–ë–æ–ª—å—à–µ 7 –ª–µ—Ç –Ω–∞–∑–∞–¥', callback_data='survey_step4_more7YearAgo'))\
                )
        case "nonetree":
            await s.witch_tree_more_eco(bot, callback_query)
        

@dp.callback_query_handler(lambda c: str(c.data).startswith('survey_step4'))
async def survey_step4(callback_query: types.CallbackQuery):
    
    parametr = callback_query.data.split('_')[-1]
    match parametr:
        case "list":
            cache.setex(f"result_where_did_buy_{callback_query.from_user.id}", WEEK, parametr)
        case "notList":
            return await s.else_where_did_buy_tree(bot, callback_query)
        case "inCity":
            cache.setex(f"result_where_did_buy_{callback_query.from_user.id}", WEEK, parametr)
        case "notInThisCity":
            cache.setex(f"result_where_did_buy_{callback_query.from_user.id}", WEEK, parametr)
        case "noneData":
            cache.setex(f"result_where_did_buy_{callback_query.from_user.id}", WEEK, parametr)
        case "thisYear":
            cache.setex(f"result_when_did_buy_{callback_query.from_user.id}", WEEK, parametr)
        case "1or3YearAgo":
            cache.setex(f"result_when_did_buy_{callback_query.from_user.id}", WEEK, parametr)
        case "4or7YearAgo":
            cache.setex(f"result_when_did_buy_{callback_query.from_user.id}", WEEK, parametr)
        case "more7YearAgo":
            cache.setex(f"result_when_did_buy_{callback_query.from_user.id}", WEEK, parametr)
        
    tree = cache.get(f"result_tree_{callback_query.from_user.id}")
    match tree:
        case "realtree":
            await bot.edit_message_text(
                    text=msg.survey_step5_when_did_you_buy_tree,
                    chat_id=callback_query.from_user.id,
                    message_id=cache.get(f'survey_msg_to_{callback_query.from_user.id}'),
                    reply_markup=InlineKeyboardMarkup()\
                        .row(InlineKeyboardButton(text='–ó–∞ –Ω–µ–¥–µ–ª—é –¥–æ –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞', callback_data='survey_step5_4weekDecember'))\
                        .row(InlineKeyboardButton(text='–ó–∞ –¥–≤–µ –Ω–µ–¥–µ–ª–∏ –¥–æ –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞', callback_data='survey_step5_3weekDecember'))\
                        .row(InlineKeyboardButton(text='–í –ø–µ—Ä–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –¥–µ–∫–∞–±—Ä—è', callback_data='survey_step5_firstHalfDecember'))\
                        .row(InlineKeyboardButton(text='–ï—â–µ –≤ –Ω–æ—è–±—Ä–µ', callback_data='survey_step5_november'))\
                )
        case "plastictree":
            await s.else_where_did_buy_tree(bot, callback_query, step=5)

@dp.callback_query_handler(lambda c: str(c.data).startswith('survey_step5'))
async def survey_step6(callback_query: types.CallbackQuery):
    
    parametr = callback_query.data.split('_')[-1]
    match parametr:
        case "inCity":
            cache.setex(f"result_where_did_buy_{callback_query.from_user.id}", WEEK, parametr)
        case "notInThisCity":
            cache.setex(f"result_where_did_buy_{callback_query.from_user.id}", WEEK, parametr)
        case "noneData":
            cache.setex(f"result_where_did_buy_{callback_query.from_user.id}", WEEK, parametr)
        case 'november':
            cache.setex(f"result_when_did_buy_{callback_query.from_user.id}", WEEK, parametr)
        case 'firstHalfDecember':
            cache.setex(f"result_when_did_buy_{callback_query.from_user.id}", WEEK, parametr)
        case '3weekDecember':
            cache.setex(f"result_when_did_buy_{callback_query.from_user.id}", WEEK, parametr)
        case '4weekDecember':
            cache.setex(f"result_when_did_buy_{callback_query.from_user.id}", WEEK, parametr)

    await s.witch_tree_more_eco(bot, callback_query)


@dp.callback_query_handler(lambda c: str(c.data).startswith('survey_step6'))
async def survey_step7(callback_query: types.CallbackQuery):
    
    parametr = callback_query.data.split('_')[-1]
    match parametr:
        case 'real':
            cache.setex(f"result_opinion_eco_tree_{callback_query.from_user.id}", WEEK, parametr)
        case 'plastic':
            cache.setex(f"result_opinion_eco_tree_{callback_query.from_user.id}", WEEK, parametr)
        case 'notAny':
            cache.setex(f"result_opinion_eco_tree_{callback_query.from_user.id}", WEEK, parametr)
    await bot.edit_message_text(
                    text=msg.survey_step7,
                    chat_id=callback_query.from_user.id,
                    message_id=cache.get(f'survey_msg_to_{callback_query.from_user.id}'),
                    reply_markup=types.InlineKeyboardMarkup()
                )
    await Form.eco.set()

@dp.message_handler(content_types=['text'], state=Form.eco)
async def survey_step8(message: types.Message, state: FSMContext):
    
    cache.setex(f"result_open_opinion_eco_tree_{message.from_user.id}", WEEK, message.text)
    await state.finish()
    await bot.delete_message(
        chat_id=message.from_user.id,
        message_id=cache.get(f"survey_msg_to_{message.from_user.id}")
    )
    msg_survey = await bot.send_message(
        chat_id=message.from_user.id,
        text=msg.survey_step8,
        reply_markup=InlineKeyboardMarkup().row(InlineKeyboardButton('–ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è üëç', callback_data='survey_step8_like'))\
            .row(InlineKeyboardButton('–ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è üëé', callback_data='survey_step8_dontLike'))
    )
    cache.setex(f"survey_msg_to__{message.from_user.id}", WEEK, msg_survey.message_id)

@dp.callback_query_handler(lambda c: str(c.data).startswith('survey_step8'))
async def survey_step9(callback_query: types.CallbackQuery):
    
    await Form.feedback.set()
    parametr = callback_query.data.split('_')[-1]
    match parametr:
        case 'like':
            cache.setex(f"result_survey_{callback_query.from_user.id}", WEEK, parametr)
            await bot.edit_message_text(
                    text=msg.survey_step9_like,
                    chat_id=callback_query.from_user.id,
                    message_id=cache.get(f'survey_msg_to__{callback_query.from_user.id}'),
                    reply_markup=types.InlineKeyboardMarkup()
                )
        case 'dontLike':
            cache.setex(f"result_survey_{callback_query.from_user.id}", WEEK, parametr)
            await bot.edit_message_text(
                    text=msg.survey_step9_dontLike, 
                    chat_id=callback_query.from_user.id,
                    message_id=cache.get(f'survey_msg_to__{callback_query.from_user.id}'),
                    reply_markup=types.InlineKeyboardMarkup()
                )


@dp.message_handler(content_types=['text'], state=Form.feedback)
async def survey_step10(message: types.Message, state: FSMContext):
    await state.finish()
    cache.setex(f"result_survey_opinion_{message.from_user.id}", WEEK, message.text)
    await bot.send_message(
        chat_id=message.from_user.id,
        text="–°–ø–∞—Å–∏–±–æ! –î–ª—è –Ω–∞—Å –∫–∞–∂–¥—ã–π –æ—Ç–∑—ã–≤ –≤–∞–∂–µ–Ω.\n\n\n–°–µ–π—á–∞—Å –º—ã –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—à–µ–≥–æ –æ–ø—Ä–æ—Å–∞ –≤ –∫–∞—Ä—Ç–∏–Ω–∫–∞—Ö.\n\n–ò –µ—â—ë –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –∫–∞–∫ –Ω–∞–º –º–æ–∂–Ω–æ –ø–æ–º–æ—á—å, –∞ –≤–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫!\n\n\n–ù–æ –Ω–∞–º –Ω–∞–¥–æ —É–∑–Ω–∞—Ç—å –≤–∞—à—É –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–º –≤–µ—Ä–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫–∏—Ü—é. –£ –≤–∞—Å –∫–∞–∫–∞—è –û–°?",
        reply_markup=InlineKeyboardMarkup().row(InlineKeyboardButton('üçè iOS', callback_data='survey_finish_ios'))\
            .row(InlineKeyboardButton('ü§ñ Android', callback_data='survey_finish_android'))
    )











@dp.callback_query_handler(lambda c: str(c.data).startswith('survey_finish'))
async def survey_step10(callback_query: types.CallbackQuery, state: FSMContext):
    await types.ChatActions.upload_photo()
    media = types.MediaGroup()
    media_instructions = types.MediaGroup()
    parametr_phone = callback_query.data.split('_')[-1]
    match parametr_phone:
        case 'ios':
            media_instructions.attach_photo(
                photo=types.InputFile("instuctions/ios/one.png"),
                caption='ios')
            media_instructions.attach_photo(types.InputFile("instuctions/ios/two.png"))
            media_instructions.attach_photo(types.InputFile("instuctions/ios/three.png"))
            media_instructions.attach_photo(types.InputFile("instuctions/ios/four.png"))
            media_instructions.attach_photo(types.InputFile("instuctions/ios/five.png"))
            media_instructions.attach_photo(types.InputFile("instuctions/ios/six.png"))

            cache.setex(f"user_phone_{callback_query.from_user.id}", WEEK, parametr_phone)
        case 'android':
            media_instructions.attach_photo(
                photo=types.InputFile("instuctions/android/one.png"),
                caption='android')
            media_instructions.attach_photo(types.InputFile("instuctions/android/two.png"))
            media_instructions.attach_photo(types.InputFile("instuctions/android/three.png"))
            media_instructions.attach_photo(types.InputFile("instuctions/android/four.png"))
            media_instructions.attach_photo(types.InputFile("instuctions/android/five.png"))
            media_instructions.attach_photo(types.InputFile("instuctions/android/six.png"))
            

            cache.setex(f"user_phone_{callback_query.from_user.id}", WEEK, parametr_phone)

    # —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    city = cache.get(f"result_city_{callback_query.from_user.id}")
    tree = cache.get(f"result_tree_{callback_query.from_user.id}")
    reason_tree = cache.get(f"result_reason_{callback_query.from_user.id}")
    where_did_buy = cache.get(f"result_where_did_buy_{callback_query.from_user.id}")
    when_did_buy = cache.get(f"result_when_did_buy_{callback_query.from_user.id}")
    opinion_eco = cache.get(f"result_opinion_eco_tree_{callback_query.from_user.id}")
    open_opinion_eco = cache.get(f"result_open_opinion_eco_tree_{callback_query.from_user.id}")
    result_survey = cache.get(f"result_survey_{callback_query.from_user.id}")
    result_survey_opinion = cache.get(f"result_survey_opinion_{callback_query.from_user.id}")
    user_phone = cache.get(f"user_phone_{callback_query.from_user.id}")
    
    match tree:
        case 'realtree':
            link = 'stories_img/realtree/my_choise_real.jpg'
            media.attach_photo(types.InputFile(link))
        case 'plastictree':
            link ='stories_img/plastictree/my_choise_plastic.jpg'
            media.attach_photo(types.InputFile(link))
        case 'nonetree':
            if reason_tree == 'nonnewyear':
                link = 'stories_img/nonetree/my_choise_nonenewyear.jpg'
                media.attach_photo(types.InputFile(link))
            elif reason_tree == 'chineseyear':
                link = 'stories_img/nonetree/my_choise_chineseyear.jpg'
                media.attach_photo(types.InputFile(link))
            elif reason_tree == 'nowish':
                link = 'stories_img/nonetree/my_choise_nowish.jpg'
                media.attach_photo(types.InputFile(link))

    match reason_tree:
        case 'price':
            if tree == 'realtree':
                link = 'stories_img/realtree/reason/price.jpg'
                media.attach_photo(types.InputFile(link))
            elif tree == 'plastictree':
                link = 'stories_img/plastictree/reason/price.jpg'
                media.attach_photo(types.InputFile(link))
        case 'confort':
            if tree == 'realtree':
                link = 'stories_img/realtree/reason/comfort.jpg'
                media.attach_photo(types.InputFile(link))
            elif tree == 'plastictree':
                link = 'stories_img/plastictree/reason/comfort.jpg'
                media.attach_photo(types.InputFile(link))
        case 'like':
            if tree == 'realtree':
                link = 'stories_img/realtree/reason/like.jpg'
                media.attach_photo(types.InputFile(link))
            elif tree == 'plastictree':
                link = 'stories_img/plastictree/reason/like.jpg'
                media.attach_photo(types.InputFile(link))
        case 'long':            
            if tree == 'plastictree':
                link = 'stories_img/plastictree/reason/long.jpg'
                media.attach_photo(types.InputFile(link))
        case 'smell':            
            if tree == 'realtree':
                link = 'stories_img/realtree/reason/smell.jpg'
                media.attach_photo(types.InputFile(link))
    match when_did_buy:
        case 'thisYear':
            link = 'stories_img/plastictree/when/less1.jpg'
            media.attach_photo(types.InputFile(link))
        case '1or3YearAgo':
            link = 'stories_img/plastictree/when/more1.jpg'
            media.attach_photo(types.InputFile(link))
        case '4or7YearAgo':
            link = 'stories_img/plastictree/when/more3.jpg'
            media.attach_photo(types.InputFile(link))
        case 'more7YearAgo':
            link = 'stories_img/plastictree/when/more7.jpg'
            media.attach_photo(types.InputFile(link))
        case 'november':
            link = 'stories_img/realtree/when/nov.jpg'
            media.attach_photo(types.InputFile(link))
        case 'firstHalfDecember':
            link = 'stories_img/realtree/when/firsthalfdec.jpg'
            media.attach_photo(types.InputFile(link))
        case '3weekDecember':
            link = 'stories_img/realtree/when/3weekdec.jpg'
            media.attach_photo(types.InputFile(link))
        case '4weekDecember':
            link = 'stories_img/realtree/when/4weekdec.jpg'
            media.attach_photo(types.InputFile(link))
    link_share = 'stories_img/share.jpg'
    media.attach_photo(types.InputFile(link_share))
    await asyncio.sleep(2)
    user_deep_link = await get_start_link(callback_query.from_user.id, encode=True)

    await bot.send_message(
        chat_id=callback_query.from_user.id,
        text=f"*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è {parametr_phone}*\n\nüì±‚è¨üì®‚è¨üéÅ‚è¨",
        parse_mode=types.ParseMode.MARKDOWN_V2
    )

    await bot.send_media_group(
        chat_id=callback_query.from_user.id,
        media=media_instructions,
    )

    await db.insert_survey_result(
        tg_user_id=callback_query.from_user.id,
        city=city,
        witch_tree=tree,
        why_this_choise=reason_tree,
        where_bought=where_did_buy,
        when_bought=when_did_buy,
        which_eco=opinion_eco,
        why_eco=open_opinion_eco,
        result_survey=result_survey,
        result_survey_opinion=result_survey_opinion,
        user_phone = user_phone
    )


    await bot.send_message(
        chat_id=callback_query.from_user.id, 
        text=md.text(
            md.bold('–ò —Ç–µ–∫—Å—Ç–æ–º ‚è¨'),
            md.text(),
            md.text('–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ –Ω–∞—à –æ–ø—Ä–æ—Å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö –∏ –≤—ã–ª–æ–∂–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\.\n–¢–∞–∫ –¥—Ä—É–∑—å—è —Å–º–æ–≥—É—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –≤–∞–º –æ—Ç–∫—Ä—ã—Ç–∫—É, –∞–Ω–æ–Ω–∏–º–Ω–æ –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é'),
            md.text(),
            md.text('1\. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∞—à—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ, –æ–Ω–∞ —Å–∫–æ–ø–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ‚è¨\.'),
            md.text(),
            md.text(md.bold('–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:') , md.code(user_deep_link)),
            md.text(),
            md.text('2\. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏\.'),
            md.text(''),
            md.text('3\. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏—Ö –Ω–∞ —Å–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\.'),
            md.text(''),
            md.text('4\. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ Instagram\*, –æ—Ç–∫—Ä–æ–π—Ç–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å—Ç–æ—Ä–∏—Å, –¥–æ–±–∞–≤—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –ø—Ä–æ–∂–º–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Ç–∏–∫–µ—Ä, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É\.'),
            md.text(''),
            md.text('5\. –ò –≤—ã–±–µ—Ä–∏—Ç–µ "—Å—Å—ã–ª–∫–∞" –≤ —Å–ø–∏—Å–∫–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤\.'),
            md.text(''),
            md.text('6\. –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞–Ω–µ–µ —Å—Å—ã–ª–∫—É –≤ –ø–æ–ª–µ url\. –ì–æ—Ç–æ–≤–æ\!'),
            md.text(),
            md.text('–ß–µ—Ä–µ–∑ –ø–∞—Ä—É –¥–Ω–µ–π –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º, –∫—Ç–æ –ø—Ä–æ—à–µ–ª –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∏ –Ω–∞–ø–∏—Å–∞–ª –≤–∞–º —á—Ç–æ\-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–µ'),
            md.text(),
            md.text('–í—ã–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ\! –í—ã –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã, –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å —Ç–∞–∫–∏–º –∂–µ –≤ 2023\!'),
            md.text(),
            md.text(),
            md.text('\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_'),
            md.italic('*–ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç Meta,\n–ø—Ä–∏–∑–Ω–∞–Ω–Ω–æ–π —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–æ–π –≤ –†–æ—Å—Å–∏–∏'),
            sep='\n'
        ),
        parse_mode=types.ParseMode.MARKDOWN_V2)

    #—Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–æ—Å–∞
    await bot.send_message(callback_query.from_user.id, '*–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–æ—Å–∞*\n\n‚è¨üå≤‚è¨üå≤‚è¨üå≤', parse_mode=types.ParseMode.MARKDOWN_V2)

    await bot.send_media_group(
        chat_id=callback_query.from_user.id,
        media=media,
    )

    await bot.send_message(
        chat_id = callback_query.from_user.id, 
        text=md.text(
            md.bold('–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –Ω–æ–≤—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—Å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö:'),
            md.text('‚ñ™Ô∏è ' ,md.link('–ò–Ω—Å—Ç–∞–≥—Ä–∞–º', 'https://www.instagram.com/sreda_media/'), "\*", sep=''),
            md.text('‚ñ™Ô∏è', md.link('–¢–µ–ª–µ–≥—Ä–∞–º', 'https://t.me/SredaMediaChannel')),
            md.text('‚ñ™Ô∏è', md.link('–í–ö', 'https://vk.com/sredamediapublic')),
            md.text('‚ñ™Ô∏è', md.text('/start ‚Äî –¥–ª—è –Ω–æ–≤—ã—Ö –æ–ø—Ä–æ—Å–æ–≤')),
            md.text(),
            md.text('\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_\_'),
            md.italic('*–ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç Meta,\n–ø—Ä–∏–∑–Ω–∞–Ω–Ω–æ–π —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–æ–π –≤ –†–æ—Å—Å–∏–∏'),
            sep='\n'
        ), 
        parse_mode=types.ParseMode.MARKDOWN_V2,
        disable_web_page_preview=True)


async def on_shutdown(dp):
    logging.warning('Shutting down..')
    # –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
    db._conn.close()
    logging.warning("DB Connection closed")
